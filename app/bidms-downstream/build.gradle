/*
 * Copyright (c) 2020, Regents of the University of California and
 * contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
plugins {
    id 'groovy'
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation 'jakarta.servlet:jakarta.servlet-api'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Groovy
    implementation 'org.apache.groovy:groovy'
    implementation 'org.apache.groovy:groovy-sql'
    implementation 'org.apache.groovy:groovy-json'

    implementation "org.postgresql:postgresql"

    // JMS client
    implementation "org.springframework:spring-jms"
    implementation "org.apache.activemq:activemq-client"
    implementation "org.messaginghub:pooled-jms"

    // Apache HTTP client to be used for RestTemplates
    implementation "org.apache.httpcomponents.client5:httpclient5"

    // Spring LDAP
    implementation "org.springframework.ldap:spring-ldap-core"

    implementation "commons-codec:commons-codec"

    implementation pdep(rootProject.bidmsConnectorsDep)
    implementation pdep(rootProject.bidmsAppCommonDep)
    implementation pdep(rootProject.bidmsAppCommonConfDep)
    implementation pdep(rootProject.bidmsRestServiceCommonDep)
    implementation pdep(rootProject.bidmsSpringSecurityApiDep)
    implementation pdep(rootProject.bidmsRegistryModelDep)
    implementation pdep(rootProject.bidmsCommonJsonDep)
    implementation pdep(rootProject.bidmsCommonOrmDep)
    implementation pdep(rootProject.bidmsRestClientDep)
    implementation pdep(rootProject.bidmsMessagingClientDep)
    implementation pdep(rootProject.bidmsMessagingListenerDep)
    implementation pdep(rootProject.bidmsLoggingDep)
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

testing {
    suites {
        integrationTest(JvmTestSuite) {
            dependencies {
                implementation project()
            }
        }
    }
}
tasks.named('check') { 
    dependsOn(testing.suites.integrationTest)
}

tasks.named('test') {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

tasks.named('integrationTest') {
  testLogging {
    events "passed", "skipped", "failed"
  }
}
