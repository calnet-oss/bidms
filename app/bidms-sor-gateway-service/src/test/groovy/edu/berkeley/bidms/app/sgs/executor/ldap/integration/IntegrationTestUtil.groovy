/*
 * Copyright (c) 2020, Regents of the University of California and
 * contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package edu.berkeley.bidms.app.sgs.executor.ldap.integration

import org.springframework.jdbc.core.JdbcTemplate

class IntegrationTestUtil {
    static class SqlStmt {
        String sql
        Object[] args

        SqlStmt(String sql, Object... args) {
            this.sql = sql
            this.args = args
        }

        static SqlStmt create(String sql, Object... args) {
            return new SqlStmt(sql, args)
        }
    }

    static void setupRegistryDatabase(JdbcTemplate registryJdbcTemplate) {
        [
                SqlStmt.create("""CREATE TABLE SOR (
                    sorId SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    sorName VARCHAR(64) NOT NULL
                  )"""
                ),
                SqlStmt.create("INSERT INTO SOR (sorName) VALUES(?)", "LDAP"),
                SqlStmt.create("INSERT INTO SOR (sorName) VALUES(?)", "ALUMNI"),
                SqlStmt.create("""CREATE TABLE SORObjectChecksumQuery (
                    sorId SMALLINT PRIMARY KEY REFERENCES SOR(sorId),
                    queryTime TIMESTAMP NOT NULL,
                    lastNumericMarker BIGINT NOT NULL,
                    objectQuantity INTEGER NOT NULL,
                    queryDurationSeconds INTEGER
                  )"""
                ),
                SqlStmt.create("""CREATE TABLE SORObjectChecksum (
                    sorId SMALLINT NOT NULL REFERENCES SOR(sorId),
                    sorObjKey VARCHAR(255) NOT NULL,
                    hash BIGINT NOT NULL,
                    hashVersion INTEGER NOT NULL,
                    timeMarker TIMESTAMP NOT NULL,
                    numericMarker BIGINT NOT NULL,
                    PRIMARY KEY(sorId, sorObjKey)
                  )"""
                ),
                SqlStmt.create("""CREATE TABLE SORObject (
                    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    sorId SMALLINT NOT NULL REFERENCES SOR(sorId),
                    sorObjKey VARCHAR(255) NOT NULL,
                    uid VARCHAR(64),
                    sorQueryTime TIMESTAMP NOT NULL,
                    jsonVersion INTEGER NOT NULL,
                    objJson JSON NOT NULL,
                    hash BIGINT,
                    hashVersion INTEGER,
                    isDeleted BOOLEAN NOT NULL DEFAULT false,
                    UNIQUE KEY sorobject_uniq_idx (sorId, sorObjKey)
                  )"""
                )
        ].each { stmt ->
            if (stmt.args) {
                registryJdbcTemplate.update(stmt.sql, stmt.args)
            } else {
                registryJdbcTemplate.execute(stmt.sql)
            }
        }
    }

    static void cleanupRegistryDatabase(JdbcTemplate registryJdbcTemplate) {
        [
                SqlStmt.create("DROP TABLE SORObject"),
                SqlStmt.create("DROP TABLE SORObjectChecksum"),
                SqlStmt.create("DROP TABLE SORObjectChecksumQuery"),
                SqlStmt.create("DROP TABLE SOR")
        ].each { stmt ->
            registryJdbcTemplate.execute(stmt.sql)
        }
    }
}
